<?php
// $Id: rolecontrol.module,v 1.4.2.7.2.8 2007/06/08 16:24:51 debtman7 Exp $

/* TODO Automatically add Drupal.settings.basePath
   In Drupal 5, you would have to add the base path to Drupal.settings yourself
   if you needed it (it's needed for just about every AHAH/AJAX enabled module
   if you did it right). Now in Drupal 6, it's added automatically. You can always
   find it at Drupal.settings.basePath (actually, as soon as drupal_add_js() is
   called at least once, so this is similar to the way we automatically add
   drupal.js and jquery.js. */

/* TODO FormAPI image buttons are now supported.
   FormAPI now offers the 'image_button' element type, allowing developers to
   use icons or other custom images in place of traditional HTML submit buttons.

$form['my_image_button'] = array(
  '#type'         => 'image_button',
  '#title'        => t('My button'),
  '#return_value' => 'my_data',
  '#src'          => 'my/image/path.jpg',
); */

/* TODO node_access_rebuild($batch_mode = TRUE) / node_access_needs_rebuild()
   To avoid PHP timeouts when rebuilding content access permissions (which can
   critically leave the site's content half open), node_access_rebuild() now
   accepts a $batch_mode boolean parameter (defaults to FALSE), letting it
   operate in 'progressive' mode using the new D6 batch processing (progressbar
   processing, Ã  la update.php).
   See http://api.drupal.org/api/function/node_access_needs_rebuild/6. */

/* TODO Node access modules : simplified hook_enable / hook_disable / hook_node_access_records
   In D5, modules defining node access permissions via hook_node_grants /
   hook_node_access_records had to do a bit of hoop jumping : call
   node_access_rebuild() in their hook_enable / hook_disable, check they're not
   being disabled before actually returning their grants in hook_node_access_records()...
   This is not required in D6 anymore : the system ensures the node grants are
   rebuilt if needed when modules are enabled or disabled. Therefore, node access
   modules should *not* call node_access_rebuild themselves on enable/disable.  */

/* TODO Remove db_num_rows() method
   The db_num_rows() method was removed from the database abstraction layer in
   6.x core, as it was a database dependent method. Developers need to use other
   handling to replace the needs of this method. */

/* TODO hook_nodeapi('submit') has been replaced by op='presave'
   There is no longer a 'submit' op for nodeapi. Instead you may use the newly
   created 'presave' op. Note, however, that this op is invoked at the beginning
   of node_save(), in contrast to op='submit' which was invoked at the end of
   node_submit(). Thus 'presave' operations will be performed on nodes that are
   saved programatically via node_save(), while in Drupal 5.x op='submit' was
   only applied to nodes saved via the node form. Note that the node form is now,
   in effect, a multistep form (for example when previewing), so if you need to
   fix up the data in the node for re-building the form, use a #submit function
   added to the node form's $form array. */

/* TODO Change 'Submit' to 'Save' on buttons
   It has been agreed on that the description 'Submit' for a button is not a
   good choice since it does not indicate what actually happens. While for
   example on node editing forms, 'Preview' and 'Delete' describe exactly what
   will happen when the user clicks on the button, 'Submit' only gives a vague
   idea. When labelling your buttons, make sure that it is clear what this
   button does when the user clicks on it. */

/* TODO New user_mail_tokens() method may be useful.
   user.module now provides a user_mail_tokens() function to return an array
   of the tokens available for the email notification messages it sends when
   accounts are created, activated, blocked, etc. Contributed modules that
   wish to make use of the same tokens for their own needs are encouraged
   to use this function. */

/* TODO
   There is a new hook_watchdog in core. This means that contributed modules
   can implement hook_watchdog to log Drupal events to custom destinations.
   Two core modules are included, dblog.module (formerly known as watchdog.module),
   and syslog.module. Other modules in contrib include an emaillog.module,
   included in the logging_alerts module. See syslog or emaillog for an
   example on how to implement hook_watchdog.
function example_watchdog($log = array()) {
  if ($log['severity'] == WATCHDOG_ALERT) {
    mysms_send($log['user']->uid,
      $log['type'],
      $log['message'],
      $log['variables'],
      $log['severity'],
      $log['referer'],
      $log['ip'],
      format_date($log['timestamp']));
  }
} */

/* TODO Implement the hook_theme registry. Combine all theme registry entries
   into one hook_theme function in each corresponding module file.
function rolecontrol_theme() {
  return array(
    'rolecontrol_grants_form' => array(
      'file' => 'rolecontrol.module',
      'arguments' => array(
        'form' => NULL,
      ),
    ),
    'rolecontrol_admin_fieldset' => array(
      'file' => 'rolecontrol.module',
      'arguments' => array(
        'form' => NULL,
      ),
    ),
  );
} */

/**
 * Implementation of hook_help().
 */
function rolecontrol_help($path, $arg) {
  if (preg_match('|^node/\d+/grant|', $path)) {
    $message = t('You can set grants per users.');
    $message .= t(' You need to check the Keep checkbox if you want to keep the user for granting. Users with Keep checkbox checked remain in the user table between searches. Note that user rights are additional to those coming from roles.');
  }
}


/**
 * Implementation of hook_menu().
 */
function rolecontrol_menu() {
  $items = array();
/* TODO
   Non menu code that was placed in hook_menu under the '!$may_cache' block
   so that it could be run during initialization, should now be moved to hook_init.
   Previously we called hook_init twice, once early in the bootstrap process, second
   just after the bootstrap has finished. The first instance is now called boot
   instead of init.
   
   In Drupal 6, there are now two hooks that can be used by modules to execute code
   at the beginning of a page request. hook_boot() replaces hook_boot() in Drupal 5
   and runs on each page request, even for cached pages. hook_boot() now only runs
   for non-cached pages and thus can be used for code that was previously placed in
   hook_menu() with $may_cache = FALSE:
   
   Dynamic menu items under a '!$may_cache' block can often be simplified
   to remove references to arg(n) and use of '%<function-name>' to check
   conditions. See http://drupal.org/node/103114.
   
   The title and description arguments should not have strings wrapped in t(),
   because translation of these happen in a later stage in the menu system.
*/
  if ($may_cache) {
    $items['admin/user/rolecontrol', 'title' => 'Role Control'] = array(
      'page callback' => 'rolecontrol_admin', 'access arguments' => array('administer rolecontrol'),
      'description' => 'Change default settings for the rolecontrol module');
  }
  else {
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      $types = variable_get('rolecontrol-types', array());
      global $user;
      if ($node->nid && $types[$node->type] && (user_access('grant node permissions') || (user_access('grant own node permissions') && $node->uid == $user->uid))) {
        $items['node/'. $node->nid .'/grant', 'title' => 'Grant'] = array(
          'page callback' => 'rolecontrol_page', 'page arguments' => $node->nid,
          'access arguments' => rolecontrol_access('grant', $node),
          'weight' => 5,
          'type' => MENU_LOCAL_TASK);
      }
    }
  }
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function rolecontrol_perm() {
  return array('administer rolecontrol', 'grant node permissions', 'grant own node permissions');
}

/**
 * Implementation of hook_access().
 */
function rolecontrol_access($op, $node, $account) {


  if ($op == 'grant') {
    if (user_access('grant node permissions', $account) || (user_access('grant own node permissions', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
}

/**
 * Menu callback. Draws the page.
 */
function rolecontrol_page($nid) {
  $output = drupal_get_form('rolecontrol_grants_form', $nid);
 
  $node = node_load($nid); 
  drupal_set_title(check_plain($node->title));
  return $output;
}

function rolecontrol_grants_form(&$form_state, $nid) {
    $node = node_load($nid);

  // build our form
  $edit = _rolecontrol_populate($nid);
//dprint_r($edit);
  $roles = $edit['rid'];
  $users = $edit['uid'];

  $form['nid'] = array('#type' => 'value', '#value' => $nid);
	
  // roles table
  if (is_array($roles)) {
    $form['rid'] = array('#tree' => TRUE);
//    $allowed = variable_get('rolecontrol-roles', array());
 
	$myvar = variable_get('rolecontrol_' . $node -> type, array());	
	
	foreach($myvar as $i)
	{
	    $allowed_view[$i['gid']] = $i['grant_view_access'];
	    $allowed_edit[$i['gid']] = $i['grant_edit_access'];
	    $allowed_delete[$i['gid']] = $i['grant_delete_access'];
	    $default_view[$i['gid']] = $i['grant_view'];
	    $default_edit[$i['gid']] = $i['grant_update'];
	    $default_delete[$i['gid']] = $i['grant_delete'];
	}

	foreach ($roles as $key => $field)
    {
    	if ($allowed_view[$key] || $allowed_edit[$key] || $allowed_delete[$key])
    	{	
	   	    if($allowed_view[$key])
	   	    {
	   	    	$k=0;
	   	    	if ($default_view[$key]) $k=1;
	   	    	$form['rid'][$key]['name'] = array('#type' => 'hidden', '#value' => $field['name']);
	            $form['rid'][$key]['grant_view'] = array('#type' => 'checkbox', '#default_value' => $field['grant_view']); 	    	
	   	    }
	   	    else $form['rid'][$key]['grant_view'] = array('#type' => 'checkbox', '#disabled' => TRUE);	
		    if($allowed_edit[$key])
		    {
		    	$k=0;
		    	if ($default_edit[$key]) $k=1;
		    	$form['rid'][$key]['name'] = array('#type' => 'hidden', '#value' => $field['name']);
	            $form['rid'][$key]['grant_update'] = array('#type' => 'checkbox', '#default_value' => $field['grant_update']);
	   	    }
	   	    else $form['rid'][$key]['grant_update'] = array('#type' => 'checkbox', '#disabled' => TRUE);
	   	    if($allowed_delete[$key])
	   	    {
	   	    	$k=0;
	   	    	if ($default_delete[$key]) $k=1;
	   	    	$form['rid'][$key]['name'] = array('#type' => 'hidden', '#value' => $field['name']);
	            $form['rid'][$key]['grant_delete'] = array('#type' => 'checkbox', '#default_value' => $field['grant_delete']); 	    	
	   	    }
	   	    else $form['rid'][$key]['grant_delete'] = array('#type' => 'checkbox', '#disabled' => TRUE);	    
    	}   	    
    }
  }

  // users table
  if (is_array($users)) {
    $form['uid'] = array('#tree' => TRUE);
    foreach ($users as $key => $field) {
      $form['uid'][$key]['name'] = array('#type' => 'hidden', '#value' => $field['name']);
      $form['uid'][$key]['keep'] = array('#type' => 'checkbox', '#default_value' => $field['keep']);
      $form['uid'][$key]['grant_view'] = array('#type' => 'checkbox', '#default_value' => $field['grant_view']);
      $form['uid'][$key]['grant_update'] = array('#type' => 'checkbox', '#default_value' => $field['grant_update']);
      $form['uid'][$key]['grant_delete'] = array('#type' => 'checkbox', '#default_value' => $field['grant_delete']);
    }
  }
  $form['options']['CheckAll'] = array('#type' => 'markup', '#value' => 'Select All <input type="checkbox" onclick="DoToAll(this)"><br>');

  // deal with searching
  $form['old_keys'] = array('#type' => 'hidden', '#value' => $edit['keys']);
  
  // autocomplete returns errors if users don't have access to profiles
  if (user_access('access user profiles')) {
    $form['keys'] = array('#type' => 'textfield', '#default_value' => $edit['keys'], '#size' => 40, '#autocomplete_path' => 'user/autocomplete');
  } 
  else {
    $form['keys'] = array('#type' => 'textfield', '#default_value' => $edit['keys'], '#size' => 40);
  }
    
  $form['search'] = array('#type' => 'button', '#value' => t('Search'));

  $form['submit'] = array('#type' => 'submit', '#value' => t('Save Grants'));

  return $form;
}

function theme_rolecontrol_grants_form($form) {
  drupal_add_js(drupal_get_path('module', 'rolecontrol') .'/rolecontrol.js');
  // role table
  $roles = element_children($form['rid']);
  if (count($roles) > 0) {
    $header = array(t('Role'), t('View'), t('Edit'), t('Delete'));
    foreach ($roles as $key) {
      $row = array();
      $row[] = $form['rid'][$key]['name']['#value'] . drupal_render($form['rid'][$key]['name']);
      $row[] = drupal_render($form['rid'][$key]['grant_view']);
      $row[] = drupal_render($form['rid'][$key]['grant_update']);
      $row[] = drupal_render($form['rid'][$key]['grant_delete']);
      $rows[] = $row;
    }
    $output .= theme('table', $header, $rows);
  }
  $output .= drupal_render($form['options']['CheckAll']);
  // search form
  $output .= '<p /><div class="search-form">';
  $output .= '<b>' . t('Enter username to search for users:') . '</b>';
  $output .= '<div class="container-inline">';
  $output .= drupal_render($form['old_keys']);
  $output .= drupal_render($form['keys']);
  $output .= drupal_render($form['search']);
  $output .= '</div></div>';

  // user table
  unset($rows);
  $users = element_children($form['uid']);
  if (count($users) > 0) {
    $header = array(t('User'), t('Keep?'), t('View'), t('Edit'), t('Delete'));
    foreach ($users as $key) {
      $row = array();
      $row[] = $form['uid'][$key]['name']['#value'];
      $row[] = drupal_render($form['uid'][$key]['keep']);
      $row[] = drupal_render($form['uid'][$key]['grant_view']);
      $row[] = drupal_render($form['uid'][$key]['grant_update']);
      $row[] = drupal_render($form['uid'][$key]['grant_delete']);
      $rows[] = $row;
    }
    $footer = array(t('User'), t('Keep?'), t('View'), t('Edit'), t('Delete'));
    $output .= theme('table', $header, $rows, $footer);
  }
	
  $output .= drupal_render($form);

  return $output;
}

function rolecontrol_grants_form_submit($form, &$form_state) {	
  global $user;
  $grants = array();
  $nid = $form_state['values']['nid'];
  $save = array();
  $node->nid = $nid; 

  foreach (array('uid', 'rid') as $type) {
    $realm = 'rolecontrol_' . $type;
    if (is_array($form_state['values'][$type])) {
      $grants = array();
      foreach ($form_state['values'][$type] as $gid => $line) {
        $grant = array('gid' => $gid, 'realm' => $realm, 'grant_view' => $line['grant_view'], 
          'grant_update' => $line['grant_update'], 'grant_delete' => $line['grant_delete']);
        $grants[] = $grant;
        $save[] = $grant;
      }
    }
    node_access_write_grants($node, $grants, $realm);
  }

  // add author grants
  // holy crap same piece of code used 3 times aaaah!
  $author_prefs = variable_get('rolecontrol_authors', array());
  $agrant = $author_prefs[$node->type];
  if (variable_get('rolecontrol-priority', 0)) {
    $priority = 1;
  }
  else {
    $priority = 0;
  }
  if ($agrant['grant_view'] || $agrant['grant_update'] || $agrant['grant_delete']) {
    $grants[] = array(
      'realm' => 'rolecontrol_author',
      'gid' => $node->uid,
      'grant_view' => $agrant['grant_view'],
      'grant_update' => $agrant['grant_update'],
      'grant_delete' => $agrant['grant_delete'],
      'priority' => $priority
    );
    node_access_write_grants($node, $grants, 'rolecontrol_author');
  }
  

      
  // save it to our own table, thanks to the new api....
  _rolecontrol_save_new($nid, $save);

  drupal_set_message(t('Grants saved.'));
}

/**
 * Popupate $edit. Loads all roles, gathers uids from node_access and search,
 * and calculates the grants for the users.
 *
 * This queries the node_access tables, but it doesn't write so hopefully that's ok
 *
 */

function _rolecontrol_populate($nid) {
  $edit = $_POST;
  // dprint_r($edit);
  // delete what is not kept
  if (is_array($edit['uid'])) {
    foreach ($edit['uid'] as $uid => $row) {
      if (!$row['keep']) {
        unset($edit['uid'][$uid]);
      }
    }
  }
  if (!$edit) {
    $edit = array();
    // load all roles
    $result = db_query("SELECT rid, name, na.* FROM {role} LEFT JOIN {node_access} na ON rid=gid AND realm='%s' AND nid=%d ORDER BY name", 'rolecontrol_rid', $nid);
    while ($grant = db_fetch_object($result)) {
      $edit['rid'][$grant->rid] = array('name' => $grant->name, 'grant_view' => $grant->grant_view, 'grant_update' => $grant->grant_update, 'grant_delete' => $grant->grant_delete);
    }
    // load uids from node_access
    $result = db_query("SELECT uid, name FROM {node_access} na LEFT JOIN {users} ON uid=gid WHERE nid=%d AND realm='%s'", $nid, 'rolecontrol_uid');
    while ($account = db_fetch_object($result)) {
      $edit['uid'][$account->uid] = array('name' =>  $account->name, 'keep' => 1);
    }
  }
  // perform search
  if ($edit['keys'] && $edit['old_keys'] != $edit['keys']) {
    $sql = "SELECT uid, name FROM {users} WHERE name LIKE '%%%s%%'";
    $params = array(preg_replace('!\*+!', '%', $edit['keys']));
    if (is_array($edit['uid'])) {
      $sql .= ' AND uid NOT IN (%s)';
      $params[] = implode(',', array_keys($edit['uid']));
    }
    $result = db_query($sql, $params);
    while ($account = db_fetch_object($result)) {
      $edit['uid'][$account->uid] = array('name' =>  $account->name);
    }
  }
  // calculate node grants for users
  if (is_array($edit['uid'])) {
    foreach (array_keys($edit['uid']) as $uid) {
      if (!isset($edit['uid'][$uid]['grant_view'])) {
        foreach (array('grant_view', 'grant_update', 'grant_delete') as $grant_type) {
          $edit['uid'][$uid][$grant_type] = db_num_rows(db_query_range("SELECT * FROM {node_access} na LEFT JOIN {users_roles} r ON na.gid=r.rid WHERE nid=%d AND realm='%s' AND uid=%d AND %s=1", $nid, 'rolecontrol_rid', $uid, $grant_type, 0, 1)) || db_num_rows(db_query_range("SELECT * FROM {node_access} na WHERE nid=%d AND realm='%s' AND gid=%d AND %s=1", $nid, 'rolecontrol_uid', $uid, $grant_type, 0, 1));
        }
      }
    }
  }

  return $edit;
}

function _rolecontrol_save_new($nid, $grants) {
  db_query("DELETE FROM {rolecontrol} WHERE nid=%d", $nid);
  foreach ($grants as $grant) {
    db_query("INSERT INTO {rolecontrol} (nid, gid, realm, grant_view, grant_update, grant_delete) VALUES (%d, %d, '%s', %d, %d, %d)",
      $nid, $grant['gid'], $grant['realm'], $grant['grant_view'], $grant['grant_update'], $grant['grant_delete']);
  }
} 


function rolecontrol_node_grants($user, $op) {
  global $user;

  $roles = is_array($user->roles) ? array_keys($user->roles) : array(-1);
  return array('rolecontrol_rid' => $roles, 'rolecontrol_uid' => array($user->uid), 'rolecontrol_author' => array($user->uid));
}

function rolecontrol_nodeapi(&$node, $op) {
  switch ($op) {
  case 'delete':
    db_query('DELETE FROM {rolecontrol} WHERE nid=%d', $node->nid);
    break;
  }
}

function rolecontrol_admin() {
  // define our settings form
  // need to set defaults from variable_get
  return drupal_get_form('rolecontrol_admin_form');
}

function rolecontrol_admin_form(&$form_state) {
  $show = variable_get('rolecontrol-types', array());
  $roles = user_roles();
  $useroles = variable_get('rolecontrol-roles', array());

  $form['priority'] = array('#type' => 'checkbox',
                            '#title' => t('Give node grants priority'),
                            '#default_value' => variable_get('rolecontrol-priority', 0),
                            '#description' => t('If you are only using this access control module, you can safely ignore this. If you are using multiple access control modules, and you want the grants given on individual nodes to override any grants given by other modules, you should check this box.'));

//  $form['role'] =  array('#type' => 'fieldset', '#collapsible' => TRUE, '#collapsed' => TRUE, '#title' => t('Allowed Roles'), '#tree' => TRUE, '#description' => t('The selected roles will be listed on individual node grants. If you wish for certain roles to be hidden from users on the node grants tab, make sure they are not selected here'));
//  foreach ($roles as $id => $role) {
//    $form['role'][$id] = array('#type' => 'checkbox', '#title' => $role, '#default_value' => $useroles[$id]);
//  }


  foreach (node_get_types() as $type => $name)
  {
    $form['rolecontrol'][$type] = array('#type' => 'fieldset',
                                       '#collapsible' => TRUE,
                                       '#collapsed' => TRUE,
                                       '#title' => $name->name,
                                       '#tree' => TRUE,
                                       '#theme' => 'rolecontrol_admin_fieldset');

    $form['rolecontrol'][$type]['show'] = array('#type' => 'checkbox',
                                               '#title' => t('Show grant tab for this node type'),
                                               '#default_value' => $show[$type]);

    // preference for author settings
    $author_prefs = variable_get('rolecontrol_authors', array());
    $form['rolecontrol'][$type]['author']['grant_view'] = array('#type' => 'checkbox', '#default_value' => $author_prefs[$type]['grant_view']);
    $form['rolecontrol'][$type]['author']['grant_update'] = array('#type' => 'checkbox', '#default_value' => $author_prefs[$type]['grant_update']);
    $form['rolecontrol'][$type]['author']['grant_delete'] = array('#type' => 'checkbox', '#default_value' => $author_prefs[$type]['grant_delete']);

    //the one we're looking for
    $perms = variable_get('rolecontrol_' . $type, array());
    foreach ($perms as $perm) {
      $opts[$perm['gid']] = $perm;
    }
	
    // go through our roles
    foreach (user_roles() as $id => $role)
    {
      $form['rolecontrol'][$type]['roles'][$id]['name'] = array('#value' => $role);

      $form['rolecontrol'][$type]['roles'][$id]['grant_view_access'] = array('#type' => 'checkbox', '#default_value' => $opts[$id]['grant_view_access']);
	  $form['rolecontrol'][$type]['roles'][$id]['grant_edit_access'] = array('#type' => 'checkbox', '#default_value' => $opts[$id]['grant_edit_access']);
      $form['rolecontrol'][$type]['roles'][$id]['grant_delete_access'] = array('#type' => 'checkbox', '#default_value' => $opts[$id]['grant_delete_access']);
	       
      if($opts[$id]['grant_view_access'])
      	$form['rolecontrol'][$type]['roles'][$id]['grant_view'] = array('#type' => 'checkbox', '#default_value' => $opts[$id]['grant_view']);
      else 
      	$form['rolecontrol'][$type]['roles'][$id]['grant_view'] = array('#type' => 'checkbox', '#disabled' => TRUE);  

      if($opts[$id]['grant_edit_access'])
      	$form['rolecontrol'][$type]['roles'][$id]['grant_update'] = array('#type' => 'checkbox', '#default_value' => $opts[$id]['grant_update']);
      else 
      	$form['rolecontrol'][$type]['roles'][$id]['grant_update'] = array('#type' => 'checkbox', '#disabled' => TRUE);

      if($opts[$id]['grant_delete_access'])
      	$form['rolecontrol'][$type]['roles'][$id]['grant_delete'] = array('#type' => 'checkbox', '#default_value' => $opts[$id]['grant_delete']);
      else 
      	$form['rolecontrol'][$type]['roles'][$id]['grant_delete'] = array('#type' => 'checkbox', '#disabled' => TRUE);
    }
  }
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save Grants'));
  return $form;
}

function theme_rolecontrol_admin_fieldset($form) {
  $output = drupal_render($form['show']);
  $roles = element_children($form['roles']);
  $header = array(t('Role'), t('View Access'), t('Edit Access'), t('Delete Access'), t('View Default'), t('Edit Default'), t('Delete Default'));
  foreach ($roles as $role) {
    $row = array();
    $row[] = drupal_render($form['roles'][$role]['name']);
    $row[] = drupal_render($form['roles'][$role]['grant_view_access']);
    $row[] = drupal_render($form['roles'][$role]['grant_edit_access']);
    $row[] = drupal_render($form['roles'][$role]['grant_delete_access']);
    
    $row[] = drupal_render($form['roles'][$role]['grant_view']);
    $row[] = drupal_render($form['roles'][$role]['grant_update']);
    $row[] = drupal_render($form['roles'][$role]['grant_delete']);
    $rows[] = $row;
  }
  $output .= theme('table', $header, $rows);

  $header = array(t('Author Settings'), t('View'), t('Edit'), t('Delete'));
  $row = array();
  $row[] = t('Node author');
  $row[] = drupal_render($form['author']['grant_view']);
  $row[] = drupal_render($form['author']['grant_update']);
  $row[] = drupal_render($form['author']['grant_delete']);

  $output .= theme('table', $header, array($row));
  $output .= '<small>' . t('The settings selected for the node author will define what permissions the node author has. This cannot be changed on individual node grants') . '</small>';
  return $output;
}

function rolecontrol_admin_form_submit($form, &$form_state) {

  variable_set('rolecontrol-priority', $form_state['values']['priority']);

//  foreach ($form_state['values']['role'] as $id => $val) {
//    $pref[$id] = $val;
//  }

  variable_set('rolecontrol-roles', $pref);

  $author_prefs = array();
  
  foreach (node_get_types() as $type => $name) {
    $grants = array();
    // update grants
    foreach ($form_state['values'][$type]['roles'] as $role => $val) {
      $grants[] = array('gid' => $role, 'realm' => 'rolecontrol_rid',
	      'grant_view_access' => $val['grant_view_access'],
	      'grant_edit_access' => $val['grant_edit_access'],
	      'grant_delete_access' => $val['grant_delete_access'],
	      'grant_view' => $val['grant_view'],   
	   //   'grant_view' => $val['grant_view'],
	      'grant_update' => $val['grant_update'],
	      'grant_delete' => $val['grant_delete']);
    }
    variable_set('rolecontrol_' . $type, $grants);
    if ($form_state['values'][$type]['show']) {	
      $showing[$type] = 1;
    } 
    else {
      $showing[$type] = 0;
    }

    $author_prefs[$type] = $form_state['values'][$type]['author'];
  }

  // set author prefs

  variable_set('rolecontrol_authors', $author_prefs);

  variable_set('rolecontrol-types', $showing);
  node_access_rebuild();
  drupal_set_message(t('Grants Saved'), 'status');
}

function rolecontrol_node_access_records($node) {
  if (rolecontrol_disabling()) {
    return;
  }

  // need to figure out if we're going for the defaults, or if this node has a preference
  $default = variable_get('rolecontrol_' . $node->type, array());
 
  if (variable_get('rolecontrol-priority', 0)) {
    $priority = 1;
  }
  else {
    $priority = 0;
  } 
  $result = db_query("SELECT nid, gid, realm, grant_view, grant_update, grant_delete FROM {rolecontrol} where nid = %d", $node->nid);
  if (db_num_rows($result) < 1) {
    $grants = $default;
    foreach ($grants as $id => $grant) {
      $grants[$id]['priority'] = $priority;
    }
  } 
  else {
    // this node has a custom access set apart from the defaults, so return that
    $grants = array();
    while ($row = db_fetch_object($result)) {
      $grants[] = array(
        'realm' => $row->realm,
        'gid' => $row->gid,
        'grant_view' => $row->grant_view,
        'grant_update' => $row->grant_update,
        'grant_delete' => $row->grant_delete,
        'priority' => $priority);
    }
  }

  // add author grants
  $author_prefs = variable_get('rolecontrol_authors', array());
  $agrant = $author_prefs[$node->type];
  if ($agrant['grant_view'] || $agrant['grant_update'] || $agrant['grant_delete']) {
    $grants[] = array(
      'realm' => 'rolecontrol_author',
      'gid' => $node->uid,
      'grant_view' => $agrant['grant_view'],
      'grant_update' => $agrant['grant_update'],
      'grant_delete' => $agrant['grant_delete'],
      'priority' => $priority 
    );
  }
  return $grants;
}

function rolecontrol_enable() {
  node_access_rebuild();
}

function rolecontrol_disable() {
  rolecontrol_disabling(TRUE);
  node_access_rebuild();
}

function rolecontrol_disabling($set = NULL) {
  static $disabling = false;
  if ($set !== NULL) {
    $disabling = $set;
  }
  return $disabling;
} 

function rolecontrol_node_type($op, $info) {
  switch($op) {
    case 'delete':
      // node type is being deleted, get rid of prefs
      variable_del('rolecontrol_' . $info->type);
      break;
    case 'update':
      // node type has changed
      if (!empty($info->old_type) && $info->old_type != $info->type) {
        $setting = variable_get('rolecontrol_'. $info->old_type, array());
        variable_del('rolecontrol_'. $info->old_type);
        variable_set('rolecontrol_'. $info->type, $setting);
      }
      break;
    case 'insert':
      // new node type, default to all viewing
      $grants[] = array('gid' => 1, 'realm' => 'rolecontrol_rid', 'grant_view' => 1, 
                  'grant_update' => 0, 'grant_delete' => 0);
      $grants[] = array('gid' => 2, 'realm' => 'rolecontrol_rid', 'grant_view' => 1, 'grant_update' => 0, 'grant_delete' => 0);
      $author_prefs = variable_get('rolecontrol_authors', array());
      $author_prefs[$info->type] = array('grant_view' => 1, 'grant_update' => 1, 'grant_delete' => 1);
      variable_set('rolecontrol_' . $info->type, $grants); 
      node_access_rebuild();
      break;
  }
}

?>
