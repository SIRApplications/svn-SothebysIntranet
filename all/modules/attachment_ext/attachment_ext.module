<?php
// $Id: attachment_ext.module,v 1.18.2.2 2007/08/02 17:37:32 cscsteve Exp $

define(ATTACHMENT_EXT_EXTENSION_WHITELIST, variable_get('attachment_ext_text_rename_whitelist', 'jpg jpeg gif png tiff txt html doc xls pdf ppt pps odt mp3 ogg wav wmv mpg'));

/**
 * Implementation of hook_menu()
 */
function attachment_ext_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array( 
      'path' => 'admin/settings/attachment_ext', 
      'title' => t('Attachment_Ext'),
      'description' => t('Settings for Attachment_Ext module'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('attachment_ext_admin_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM, 
    );
  }

  return $items;
}

/**
 * Implementation of hook_form_alter()
 */
function attachment_ext_form_alter($form_id, &$form) {
  $type = $form['type']['#value'];
  $oldtype = $form['old_type']['#value'];

  switch ($form_id) {
    // node edit form
    case $type .'_node_form':
      if (user_access('add attachments_ext') && (variable_get('attachment_ext_node_'. $type, 0) == 1)) {
        $node = $form['#node'];
        if (!isset($node->attachments_ext)) {
          $ret = attachment_ext_load($node);
          $node->attachments_ext = $ret['attachments_ext'];
        }
        $form['#attributes'] = array('enctype' => 'multipart/form-data');
        
        // If we have attachments, open the area, otherwise it will be collapsed.
        $collapsed = !isset($node->attachments_ext);
        
        $form['attachments_ext'] = array('#type'=>'fieldset', '#title'=>t('attachments_ext'), '#tree'=>true, '#collapsible'=>true, '#collapsed'=>$collapsed, '#weight'=>1);
        $form['attachments_ext']['#theme'] = 'attachment_ext_form';

        foreach ((array)$node->attachments_ext as $key=>$attachment_ext) {
          $fields = array('aid','fid','filename','size','working');
          foreach($fields as $field) {
            $form['attachments_ext'][$key][$field] = array('#type'=>'hidden', '#value'=>$attachment_ext[$field]);
          }

          $form['attachments_ext'][$key]['deleted'] = array('#type'=>'checkbox');
          $form['attachments_ext'][$key]['hidden'] = array('#type'=>'checkbox', '#return_value'=>1, '#default_value'=>$attachment_ext['hidden']);
          $form['attachments_ext'][$key]['title'] = array('#type'=>'textfield', '#size'=>30, '#maxlength'=>255, '#default_value'=>$attachment_ext['title']);
          $form['attachments_ext'][$key]['description'] = array('#type'=>'textfield', '#size'=>100, '#maxlength'=>255, '#default_value'=>$attachment_ext['description']);
          $form['attachments_ext'][$key]['display'] = array('#type'=>'markup', '#value'=> '<strong>Filename:</strong>'. $attachment_ext['filename'] .'<br /><strong>URL:</strong><span class="attachment_ext-url">'. module_invoke('filemanager', 'url', $attachment_ext['fid'], FALSE, TRUE) .'<br /><strong>Size:</strong>' . format_size($attachment_ext['size']) . '</span>');
    	    $form['attachments_ext'][$key]['revised'] = array('#title'=>t('Show this file as revised.'), '#type'=>'checkbox', '#return_value'=>1, '#default_value'=>$attachment_ext['revised']);
        }

        $form['attachments_ext']['commands']['attachment_ext_file'] = array('#type'=>'file', '#title'=>t('File'), '#size'=>40, '#tree'=>false);
        $form['attachments_ext']['commands']['fileop_add'] = array('#type'=>'button', '#name'=>'fileop', '#value'=>t('Add'), '#tree'=>false);
      }
      break;

    // node settings form
    case 'node_type_form':
      $form['workflow']['attachment_ext_node'] = array(
        '#type'=>'radios',
        '#title'=>t('Attachments_Ext'),
        '#default_value'=>variable_get('attachment_ext_node_'. $oldtype, 0),
        '#options'=>array(0=>t('Disabled'), 1=>t('Enabled')),
      );
      break;
  }
}

/**
 * Implementation of hook_nodeapi.
 */
function attachment_ext_nodeapi(&$node, $op, $arg = 0, $arg2 = 0) {
  
  switch ($op) {
    case 'load':
      return attachment_ext_load($node);
      
    case 'alter':
      // This used to be in $op==view.  Not sure about it, but looks like alter is a good place for 
      // it since it looks like it has to do str_replace.
      foreach ((array)$node->attachments_ext as $attachment_ext) {
        if ($attachment_ext['working']) {
          $file = module_invoke('filemanager', 'get_file_info', $attachment_ext['fid']);
          $workingurl = str_replace('&amp;', '&', module_invoke('filemanager', 'url', $file, TRUE));
          $activeurl = str_replace('&amp;', '&', module_invoke('filemanager', 'url', $file, FALSE));
          $node->body = str_replace($activeurl, $workingurl, $node->body);
          $node->teaser = str_replace($activeurl, $workingurl, $node->teaser);
        }
      }
      return;

    case 'view':

      // If this is not a teaser add our attachment_ext list to the end of the body
      if (_attachment_ext_countvisible($node)>0) {
        if (!$arg) {
          $node->content['attachment_ext'] = array(
            '#value' => '<br /><a name="attachments_ext"></a>'. theme('attachments_ext', $node),
            '#weight' => 10,
            );
        }
        if (variable_get('attachment_ext_display_teaser', 0)) {
          $node->content['attachment_ext'] = array(
            '#value' => '<br /><a name="attachments_ext"></a>'. theme('attachments_ext', $node),
            '#weight' => 10,
            );
        }
      }
      return;

    case 'insert':
    case 'update':
      foreach ((array)$node->attachments_ext as $attachment_ext) {
        if (!$attachment_ext['deleted']) {
          module_invoke('filemanager', 'promote_working', $attachment_ext['fid']);
          if ($attachment_ext['aid']) {
            db_query("UPDATE {attachment_ext} SET title='%s', description = '%s', size=%d, hidden='%s', revised='%s' WHERE aid=%d", $attachment_ext['title'], $attachment_ext['description'], $attachment_ext['size'], $attachment_ext['hidden'], $attachment_ext['revised'], $attachment_ext['aid']);
          }
          else {
             $aid = db_next_id('{attachment_ext}_aid');
             db_query("INSERT INTO {attachment_ext} (aid,title,description,nid,fid,filename,size,hidden,revised,created) VALUES (%d,'%s','%s',%d,%d,'%s',%d,'%s','%s','%d')", $aid, $attachment_ext['title'],$attachment_ext['description'],$node->nid, $attachment_ext['fid'], $attachment_ext['filename'], $attachment_ext['size'], $attachment_ext['hidden'], $attachment_ext['revised'], $attachment_ext['created']=time());
          }
        }
        else {
          module_invoke('filemanager', 'delete', $attachment_ext['fid']);
          if ($attachment_ext['aid']) {
            db_query("DELETE FROM {attachment_ext} WHERE aid=%d",$attachment_ext['aid']);
          }
        }
      }
      return;

    case 'delete':
      foreach ((array)$node->attachments_ext as $attachment_ext) {
        module_invoke('filemanager', 'delete', $attachment_ext['fid']);
        if ($attachment_ext['aid']) {
          db_query("DELETE FROM {attachment_ext} WHERE aid=%d",$attachment_ext['aid']);
        }
      }
      return;

    case 'prepare':
      if (($_POST['fileop'] == t('Add')) || ($_POST['op'] == t('Preview')) || ($_POST['op'] == t('Submit'))) {
        $node->attachments_ext = $_POST['attachments_ext'];
      }
      
      if ($_POST['fileop'] == t('Add')) {
        attachment_ext_add($node);
      }
      

      return;
  }
}

/**
 * Implementation of hook_perm()
 */
function attachment_ext_perm() {
  return array('add attachments_ext');
}

/**
 * Implementation of hook_settings()
 */
function attachment_ext_admin_settings() {
  $form['display'] = array(
    '#type' => 'fieldset',
    '#title' => t('Display settings')
  );
  $form['display']['attachment_ext_display_teaser'] = array(
    '#type' => 'checkbox', '#title' => t('Display attachments in teaser'),
    '#default_value' => variable_get('attachment_ext_display_teaser', 0),
    '#return_value' => 1,
    '#description' => t('If checked attachment file lists will be added to the bottom of teasers.')
  );

  $form['security'] = array(
    '#type' => 'fieldset',
    '#title' => t('Security settings')
  );
  $form['security']['attachment_ext_private_files'] = array(
    '#type' => 'checkbox',
    '#title' => t('Private files'),
    '#default_value' => variable_get('attachment_ext_private_files', 0),
    '#return_value' => 1,
    '#description' => t('If checked attachments will be streamed through the private directory and node access security will be enforced.  When unchecked public URLs can be accessed by anyone with the URL regardless if they are logged in or have access to that node.  There is a server load impact to using private files.  Changes to this setting only affect new attachments it will not update any existing attachments.')
  );
  $form['security']['attachment_ext_text_rename_whitelist'] = array(
    '#type' => 'textarea',
    '#title' => t('File extension whitelist'),
    '#default_value' => ATTACHMENT_EXT_EXTENSION_WHITELIST,
    '#description' => t('List of extensions that are allowed to be uploaded without modification. All other extensions can still be uploaded, but they will be renamed to have a .txt file extension to protect your server from attackers.')
  );
  $form[newslink] = array(
    '#type' => 'fieldset',
    '#title' => t('New timespan')
  );
  $form[newslink]['attachments_ext_timespan'] = array(
   '#type' => 'textfield',
   '#title' => t('New Timespan'),
   '#default_value' => (variable_get('attachments_ext_timespan', 2592000) / 24 / 60 / 60 ),
   '#size' => 3,
   '#maxlength' => 3,
   '#description' => t("Number of days for content to remain \"new\".")
  );

  return system_settings_form($form);
}

function attachment_ext_admin_settings_submit($formid, $form) {
	if ($form['op'] == 'Save configuration') {
		$converted_time = $form['attachments_ext_timespan'] * 60 * 60 * 24;
		variable_set('attachments_ext_timespan', $converted_time);
		drupal_set_message('The settings have been saved');
	} elseif ($form['op'] == 'Reset to defaults') {
		$flag = variable_set('attachments_ext_timespan', 2592000);
		drupal_set_message('The settings have been reset to their default values');
	} else {
		drupal_set_message('There was an error saving the settings.', 'error');
	}
}

/**
 * Implementation of hook_file_areas()
 */
function attachment_ext_filemanager_areas() {
  return array(array('area'=>'attachments_ext','name'=>t('Attachments_Ext'),'description'=>t('Area where all node attachments are stored.')));
}

/**
 * Implementation of hook_help()
 */
function attachment_ext_help($section) {
  switch ($section) {
    case 'admin/help#attachment_ext':
      return t('<p>Attachments are files uploaded while creating nodes. These files can be used to add images to stories, blogs, etc as well as just adding documents for download.</p>
                <p>There are two factors used to determine whether a user can add attachments to the node they are creating.  First the user is checked to make sure they have <em>add attachments</em> permission.  These permissions can be set on the <a href="@permissionurl">permissions</a> page.  Second, attachments must be enabled for that particular node type.  You can enable attachments to nodes in the workflow section of each <a href="@nodeconfigurl">node type</a>.</p>', array('@permissionurl' => url('admin/user/access', NULL, 'module-attachment_ext'), '@nodeconfigurl' => url('admin/content/types')));
   }
}

/**
 * Implementation of hook_link()
 */
function attachment_ext_link($type, $node = 0, $main = 0) {
  $links = array();

  switch($type) {
    case 'node':
      if ($main == 1 && !variable_get('attachment_ext_display_teaser', 0)) {
        $count = _attachment_ext_countvisible($node);
        if ($count > 0) {
          $links['attachment_ext_tease_links'] = array(
            'title' => format_plural($count, '1 attachment_ext', '@count attachments_ext'),
            'href' => "node/$node->nid",
            'attributes' => array('title' => t('View attachment list')),
            'fragment' => "attachments_ext",
          );
        }
      }
      break;
  }

  return $links;
}

/**
 * Counts the number of visible attachments
 */
function _attachment_ext_countvisible($node) {
  $count = 0;
  foreach((array)$node->attachments_ext as $attachment_ext) {
    if (!$attachment_ext['hidden'] && !$attachment_ext['deleted']) {
      $count++;
    }
  }

  return $count;
}

/**
 * Theme the attachment form
 */
function theme_attachment_ext_form($form) {
  $output = '';
  
  $rows = array();
  foreach (element_children($form) as $key) {
    if ($key{0} != 'c') {
	$row = array(
	  t('<strong>Delete</strong>'),
  	  t('<strong>Hidden</strong>'),
  	  t('<strong>Title</strong>'),
	  t('<strong>Description</strong>'),
 	 );
	$rows[] = $row;
      $row = array(
        drupal_render($form[$key]['deleted']),
        drupal_render($form[$key]['hidden']),
        drupal_render($form[$key]['title']),
        drupal_render($form[$key]['description']),
      );
      $rows[] = $row;
	$row = array();
      $row[0]['data'] = drupal_render($form[$key]['display']);
      $row[0]['colspan'] = '4';
      $rows[] = $row;
	$row = array();
	$row[0]['data'] = drupal_render($form[$key]['revised']);
	$row[0]['colspan'] = '4';
	$rows[] = $row;
    }
  }

  if (count($rows) > 0) {
    $output .= theme('table', $header, $rows);
  }

  $output .= drupal_render($form);

  return $output;
}

/**
 * Munge the filename as needed for security purposes. Protects site from having
 * attacments executed as scripts.
 *
 * @param object $file
 *   The $file object as obtained by file_check_upload('attachment_ext_file');
 */
function attachment_ext_munge_file(&$file) {
  $whitelist = array_unique(split(' +', ATTACHMENT_EXT_EXTENSION_WHITELIST));
  $filename_parts = explode('.', $file->filename);
  $new_filename = array_shift($filename_parts); // Remove file basename.
  $final_extension = array_pop($filename_parts); // Remove final extension.

  foreach($filename_parts as $filename_part) {
    $new_filename .= ".$filename_part";
    if (!in_array($filename_part, $whitelist) && preg_match("/^[a-zA-Z]{2,5}\d?$/", $filename_part)) {
      $new_filename .= '_';
    }
  }

  $file->filename = "$new_filename.$final_extension";
  if ($final_extension == 'txt') {
    $file->filemime = 'text/plain';
  }
}

/**
 * Callback function to add an attachment to a node being edited.
 */
function attachment_ext_add(&$node) {
  $file = file_check_upload('attachment_ext_file');
  if (!$file) {
    form_set_error('attachment_ext_file', t('No file selected.'));
    return $node;
  }

  // protect from uploaded files being executed as scripts
  attachment_ext_munge_file($file);

  $new_attachment_ext['fid'] = FALSE;
  $new_attachment_ext['filename'] = $file->filename;
  $new_attachment_ext['deleted'] = FALSE;
  $new_attachment_ext['working'] = TRUE;
  $new_attachment_ext['size'] = $file->filesize;

  // If we are uploading a file with the same name as an existing
  // attachment then we should use the same fid and remove the
  // existing attachment from the array.
  foreach ((array)$node->attachments_ext as $key => $attachment_ext) {
    if ($attachment_ext['filename'] == $new_attachment_ext['filename']) {
      $new_attachment_ext['fid'] = $attachment_ext['fid'];
      $remove_key = $key;
    }
  }
  if (isset($remove_key)) {
    array_splice($node->attachments_ext, $key, 1);
  }
  else {
    $new_attachment_ext['title'] = $file->filename;
    $new_attachment_ext['description'] = '';
    $node->attachment_extcount++;
  }

  // Move the upload file into working filestore
  $file = module_invoke('filemanager', 'add_upload', 'attachment_ext_file', 'attachments_ext', variable_get('attachment_ext_private_files', 0), $new_attachment_ext["fid"]);
  if (!$file) {
    form_set_error('attachment_ext_file', t('Error saving upload to filestore.'));
    return $node;
  }
  $new_attachment_ext['fid'] = $file->fid;

  $node->attachments_ext[] = $new_attachment_ext;
}

/**
 * Load the attachments for the given node
 */
function attachment_ext_load($node) {
  $result = db_query("SELECT aid, title, description, fid, filename, size, hidden, revised, created FROM {attachment_ext} WHERE nid = %d", $node->nid);
  while ($attachment_ext = db_fetch_array($result)) {
    $attachment_ext['deleted'] = FALSE;
    $attachment_ext['working'] = FALSE;
    $attachments_ext[] = $attachment_ext;
  }
  $fields['attachments_ext'] = $attachments_ext;
  return $fields;
}

function attachment_ext_filemanager_download($file) {
  if ($file->area == 'attachments_ext') {
    // check if current user has right to view the node this file is attached to.
    $nid = db_result(db_query("SELECT nid FROM {attachment_ext} WHERE {attachment_ext}.fid = %d", $file->fid));
    $node = node_load(array('nid'=>$nid));
    if (node_access('view', $node)) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
}

/**
 * @addtogroup themeable
 * @{
 */

/**
 * Formats a list of attachments for a given node.
 */
function theme_attachments_ext($node) {
  $output  = "<div class=\"attachments_ext\">\n";

  $attributes['class'] = 'attachment_ext-list';

  $header[0]['data'] = t('');
  $header[0]['class'] = 'new';
  $header[1]['data'] = t('Filename/Title');
  $header[1]['class'] = 'filename';
  $header[2]['data'] = t('Size');
  $header[2]['class'] = 'size';

  foreach ((array)$node->attachments_ext as $attachment_ext) {
    if (!$attachment_ext['hidden'] && !$attachment_ext['deleted']) {
      // By default, title is set to filename.  The strcmp below avoids showing "filename (filename)" 
      // which is ugly and redundant.
	$show = '';
      $text = (empty($attachment_ext['title'])) || (strcmp($attachment_ext['title'], $attachment_ext['filename']) == 0) 
              ? $attachment_ext['filename'] 
              : ($attachment_ext['title'] . ' (' . $attachment_ext['filename'] . ')');
      $attrib = empty($attachment_ext['description']) ? array() : array('title' => $attachment_ext['description']);
	$timespan = variable_get('attachments_ext_timespan', 2592000);
	if ($attachment_ext['created'] > (time() - $timespan)) {
        	if ($attachment_ext['revised']) {
			$show = 'Revised';
		} else {
			$show = 'New';
		}
        }
	$row[0]['data'] = $show;
	$row[0]['class'] = 'new';
      $row[1]['data'] = l($text, module_invoke('filemanager', 'url', $attachment_ext['fid']), $attrib);
      $row[1]['data'] = module_invoke('filemanager', 'l', $text, $attachment_ext['fid'], FALSE, $attrib, TRUE);
      $row[1]['class'] = 'filename';
      $row[2]['data'] = format_size($attachment_ext['size']);
      $row[2]['class'] = 'size';
      $rows[] = $row;
    }
  }
  if (count($rows) > 0) {
    $output .= theme('table', $header, $rows, $attributes);
  }

  $output .= "</div>\n";

  return $output;
}
/**
 * @} end of addtogroup themeable
 */

